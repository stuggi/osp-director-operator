/*


Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Generated by:
//
// operator-sdk create webhook --group osp-director --version v1beta1 --kind OpenStackControlPlane --programmatic-validation
//

package v1beta1

import (
	"context"
	"fmt"
	"regexp"
	"strings"

	"k8s.io/apimachinery/pkg/runtime"
	ctrl "sigs.k8s.io/controller-runtime"
	"sigs.k8s.io/controller-runtime/pkg/client"
	logf "sigs.k8s.io/controller-runtime/pkg/log"
	"sigs.k8s.io/controller-runtime/pkg/webhook"

	"github.com/pkg/errors"
)

// OpenStackControlPlaneDefaults -
type OpenStackControlPlaneDefaults struct {
	OpenStackClientImageURL string
	OpenStackRelease        string
}

var openstackControlPlaneDefaults OpenStackControlPlaneDefaults

// log is for logging in this package.
var controlplanelog = logf.Log.WithName("controlplane-resource")

// SetupWebhookWithManager - register this webhook with the controller manager
func (r *OpenStackControlPlane) SetupWebhookWithManager(mgr ctrl.Manager, defaults OpenStackControlPlaneDefaults) error {

	openstackControlPlaneDefaults = defaults

	if webhookClient == nil {
		webhookClient = mgr.GetClient()
	}

	return ctrl.NewWebhookManagedBy(mgr).
		For(r).
		Complete()
}

// +kubebuilder:webhook:verbs=create;update;delete,path=/validate-osp-director-openstack-org-v1beta1-openstackcontrolplane,mutating=false,failurePolicy=fail,sideEffects=None,groups=osp-director.openstack.org,resources=openstackcontrolplanes,versions=v1beta1,name=vopenstackcontrolplane.kb.io,admissionReviewVersions={v1,v1beta1}

var _ webhook.Validator = &OpenStackControlPlane{}

// ValidateCreate implements webhook.Validator so a webhook will be registered for the type
func (r *OpenStackControlPlane) ValidateCreate() error {
	controlplanelog.Info("validate create", "name", r.Name)

	if err := checkBackupOperationBlocksAction(r.Namespace, APIActionCreate); err != nil {
		return err
	}

	controlPlaneList := &OpenStackControlPlaneList{}

	listOpts := []client.ListOption{
		client.InNamespace(r.Namespace),
	}

	err := webhookClient.List(context.TODO(), controlPlaneList, listOpts...)

	if err != nil {
		return err
	}

	if len(controlPlaneList.Items) >= 1 {
		return fmt.Errorf("only one OpenStackControlPlane instance is supported at this time")
	}

	err = checkDomainName(r.Spec.DomainName)

	if err != nil {
		return err
	}

	return nil
}

// ValidateUpdate implements webhook.Validator so a webhook will be registered for the type
func (r *OpenStackControlPlane) ValidateUpdate(old runtime.Object) error {
	controlplanelog.Info("validate update", "name", r.Name)

	oldControlPlane := old.(*OpenStackControlPlane)
	if r.Spec.DomainName != oldControlPlane.Spec.DomainName {
		return fmt.Errorf("domainName cannot be modified")
	}
	return nil
}

// ValidateDelete implements webhook.Validator so a webhook will be registered for the type
func (r *OpenStackControlPlane) ValidateDelete() error {
	controlplanelog.Info("validate delete", "name", r.Name)

	return checkBackupOperationBlocksAction(r.Namespace, APIActionDelete)
}

//+kubebuilder:webhook:path=/mutate-osp-director-openstack-org-v1beta1-openstackcontrolplane,mutating=true,failurePolicy=fail,sideEffects=None,groups=osp-director.openstack.org,resources=openstackcontrolplanes,verbs=create;update,versions=v1beta1,name=mopenstackcontrolplane.kb.io,admissionReviewVersions={v1,v1beta1}

// Default implements webhook.Defaulter so a webhook will be registered for the type
func (r *OpenStackControlPlane) Default() {
	openstackephemeralheatlog.Info("default", "name", r.Name)

	if r.Spec.OpenStackClientImageURL == "" {
		r.Spec.OpenStackClientImageURL = openstackControlPlaneDefaults.OpenStackClientImageURL
	}

	//
	// set OpenStackRelease if non provided
	//
	if r.Spec.OpenStackRelease == "" {

		var ospVersion OSPVersion
		var err error

		ospVersion, err = GetOSPVersionFromImageURL(r.Spec.OpenStackClientImageURL)
		if err != nil {
			openstackephemeralheatlog.Info("default", "name", r.Name)
			ospVersion = OSPVersion(openstackControlPlaneDefaults.OpenStackRelease)
		}

		r.Spec.OpenStackRelease = string(ospVersion)
	}

	//
	// set default for AdditionalServiceVIPs if non provided in ctlplane spec
	// https://docs.openstack.org/project-deploy-guide/tripleo-docs/latest/deployment/network_v2.html#service-virtual-ips
	//
	if r.Spec.OpenStackRelease == string(TemplateVersion17_0) && r.Spec.AdditionalServiceVIPs == nil {
		r.Spec.AdditionalServiceVIPs = map[string]string{
			"Redis":  "internal_api",
			"OVNDBs": "internal_api",
		}
	}
}

// GetOSPVersionFromImageURL -
func GetOSPVersionFromImageURL(imageURL string) (OSPVersion, error) {

	parts := strings.SplitN(imageURL, ":", 2)
	if len(parts) != 2 {
		return "", errors.Errorf(`Invalid image name URL "%s", expected url:tag`, imageURL)
	}

	url := parts[0]
	tag := parts[1]

	// check for downstream version in image URL tags
	// get the first major.minor version string
	re := regexp.MustCompile(`(\d+\.\d+)?`)
	match := re.FindStringSubmatch(tag)

	// if no match in checking image tag, check for upstream image version in URL
	if match == nil || match[1] == "" {
		// Until all patches backported to upstream wallaby there are two possibilities:
		// -quay.io/tripleowallaby/openstack-tripleoclient:current-tripleo
		// -quay.io/openstack-k8s-operators/tripleowallaby-openstack-tripleoclient:current-tripleo_patched
		re = regexp.MustCompile(`.*\/tripleo(.*)[-\/](openstack-tripleoclient).*`)
		match = re.FindStringSubmatch(url)
	}

	if len(match) > 0 && match[1] != "" {
		// verify parsed OSP version
		ospVersion, err := GetOSPVersion(match[1])
		return ospVersion, err
	}

	return "", fmt.Errorf("no OSP version detected from imageURL: %s", imageURL)
}
